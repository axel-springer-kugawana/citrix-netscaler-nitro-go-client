package nitro

import (
	"github.com/doubret/citrix-netscaler-nitro-go-client/nitro"
	"testing"
	"github.com/stretchr/testify/assert"
)

func Test{{$.Name|name}}(t *testing.T) {
	client := nitro.NewNitroClient("http://10.2.0.232", "nsroot", "Charlie")

	resource := create_{{$.Name}}()

	if resource == nil {
		return
	}

	err := client.Add{{$.Name|name}}(*resource)

	assert.NoError(t, err)

	{{if not ($.Schema.Key.Fields) -}}
	exists, err := client.Exists{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}}+"-unknown")

	assert.NoError(t, err)
	assert.Equal(t, exists, false)

	exists, err := client.Exists{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}})

	assert.NoError(t, err)
	assert.Equal(t, exists, true)

	res, err := client.Get{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}})

	assert.NoError(t, err)
	assert.NotNil(t, res)

	list, err := client.List{{$.Name|name}}()

	assert.NoError(t, err)
	assert.NotNil(t, list)

	// err = client.Update{{$.Name|name}}(*resource)

	// assert.NoError(t, err)

	{{if $.Schema.State -}}
	err = client.Enable{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}})

	assert.NoError(t, err)

	err = client.Disable{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}})

	assert.NoError(t, err)
	{{end -}}

	err = client.Rename{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}}, resource.{{$.Schema.Key.Name|title}}+"-rename")

	assert.NoError(t, err)

	err = client.Delete{{$.Name|name}}(resource.{{$.Schema.Key.Name|title}} + "-rename")

	assert.NoError(t, err)
	{{end -}}
}
